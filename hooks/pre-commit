#!/usr/bin/env sh

#
# An example hook script to verify what is about to be committed.
# Called by "git commit" with no arguments.  The hook should
# exit with non-zero status after issuing an appropriate message if
# it wants to stop the commit.
#
# To enable this hook, rename this file to "pre-commit".

# ANSI Colors
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
CYAN='\033[0;36m'
PURPLE='\033[0;35m'
NC='\033[0m' # No Color

# Emojis
SUCCESS=$(echo "\xF0\x9F\x91\x8D")   # Thumbs Up Emoji
WARN=$(echo "\xE2\x9A\xA0")           # Warning Emoji
ERROR=$(echo "\xF0\x9F\x98\xB1")       # Panic Emoji
WIP=$(echo "\xF0\x9F\x9A\xA7")        # Construction Emoji

if git rev-parse --verify HEAD >/dev/null 2>&1
then
	against=HEAD
else
	# Initial commit: diff against an empty tree object
	against=$(git hash-object -t tree /dev/null)
fi

# If you want to allow non-ASCII filenames set this variable to true.
allownonascii=$(git config --type=bool hooks.allownonascii)

# Redirect output to stderr.
exec 1>&2

denoCheck() {
    echo "${WIP} ${YELLOW}Running Deno checks...${NC} \n"


    echo "${WIP} ${YELLOW}check for formatting errors${NC}"
    deno fmt --check
    if [ $? -ne 0 ]; then
      echo "${ERROR} ${RED}Formatting errors found.${NC}"
      exit 1
    else
			echo "${SUCCESS} ${GREEN}No formatting errors found.${NC} \n"
    fi


		echo "${WIP} ${YELLOW}check for static typing errors${NC}"
    deno check --all src/**/*.ts
    if [ $? -ne 0 ]; then
      echo "${ERROR} ${RED}Static typing errors found.${NC}"
      exit 1
    else
			echo "${SUCCESS} ${GREEN}No static typing errors found.${NC} \n"
    fi

		echo "${WIP} ${YELLOW}check for linting errors${NC}"
    deno lint                             # check for linting errors
    if [ $? -ne 0 ]; then
      echo "${ERROR} ${RED}Linting errors found.${NC}"
      exit 1
    else
    	echo "${SUCCESS} ${GREEN}No linting errors found.${NC} \n"
    fi

    echo "${WIP} ${YELLOW}check for documentation linting errors${NC}"
		deno doc --lint ./src/**/*.ts
		if [ $? -ne 0 ]; then
			echo "${ERROR} ${RED}Documentation linting errors found.${NC}"
			exit 1
		else
			echo "${SUCCESS} ${GREEN}No Documentation linting errors found.${NC} \n"
		fi

		echo "${WIP} ${YELLOW}check for unit test failing${NC}"
    deno test > /dev/null
    if [ $? -ne 0 ]; then
      echo "${ERROR} ${RED}Unit tests failed.${NC}"
      exit 1
    else
    	echo "${SUCCESS} ${GREEN}All unit tests passed.${NC} \n"
    fi

		echo "${WIP} ${YELLOW}check for broken documentation examples${NC}"
    deno test -q --doc ./src/**/*.ts > /dev/null
    if [ $? -ne 0 ]; then
      echo "${ERROR} ${RED}JSDoc @example tag failed${NC}"
      exit 1
    else
    	echo "${SUCCESS} ${GREEN}All Docs assertions have passed.${NC} \n"
    fi

    echo "${SUCCESS} ${GREEN}All checks passed.${NC} \n"
}

denoCheck

# Cross platform projects tend to avoid non-ASCII filenames; prevent
# them from being added to the repository. We exploit the fact that the
# printable range starts at the space character and ends with tilde.
if [ "$allownonascii" != "true" ] &&
	# Note that the use of brackets around a tr range is ok here, (it's
	# even required, for portability to Solaris 10's /usr/bin/tr), since
	# the square bracket bytes happen to fall in the designated range.
	test $(git diff-index --cached --name-only --diff-filter=A -z $against |
	  LC_ALL=C tr -d '[ -~]\0' | wc -c) != 0
then
	cat <<\EOF
Error: Attempt to add a non-ASCII file name.

This can cause problems if you want to work with people on other platforms.

To be portable it is advisable to rename the file.

If you know what you are doing you can disable this check using:

  git config hooks.allownonascii true
EOF
	exit 1
fi

# If there are whitespace errors, print the offending file names and fail.
exec git diff-index --check --cached $against --
